"""–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
from collections import defaultdict
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class Metrics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.pdf_generation_times = []
        self.request_counts = defaultdict(int)
        self.error_counts = defaultdict(int)
        self.total_pdfs = 0
        
    def record_pdf_time(self, duration_ms: int):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF"""
        self.pdf_generation_times.append(duration_ms)
        self.total_pdfs += 1
        
        # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–Ω–∞—á–µ–Ω–∏–π
        if len(self.pdf_generation_times) > 100:
            self.pdf_generation_times = self.pdf_generation_times[-100:]
    
    def record_request(self, user_id: int = None):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å"""
        if user_id:
            self.request_counts[user_id] += 1
    
    def record_error(self, error_type: str = "unknown"):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É"""
        self.error_counts[error_type] += 1
    
    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not self.pdf_generation_times:
            return {
                "avg_time_ms": 0,
                "min_time_ms": 0,
                "max_time_ms": 0,
                "total_pdfs": self.total_pdfs,
                "total_requests": sum(self.request_counts.values()),
                "total_errors": sum(self.error_counts.values()),
                "error_breakdown": dict(self.error_counts)
            }
        
        return {
            "avg_time_ms": round(sum(self.pdf_generation_times) / len(self.pdf_generation_times), 2),
            "min_time_ms": min(self.pdf_generation_times),
            "max_time_ms": max(self.pdf_generation_times),
            "total_pdfs": self.total_pdfs,
            "total_requests": sum(self.request_counts.values()),
            "total_errors": sum(self.error_counts.values()),
            "error_breakdown": dict(self.error_counts),
            "last_100_avg": round(sum(self.pdf_generation_times[-100:]) / min(100, len(self.pdf_generation_times)), 2) if self.pdf_generation_times else 0
        }
    
    def log_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ª–æ–≥"""
        stats = self.get_stats()
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        logger.info(f"   –í—Å–µ–≥–æ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_pdfs']}")
        logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {stats['avg_time_ms']}ms")
        logger.info(f"   –ú–∏–Ω–∏–º—É–º: {stats['min_time_ms']}ms, –ú–∞–∫—Å–∏–º—É–º: {stats['max_time_ms']}ms")
        if stats['total_errors'] > 0:
            logger.warning(f"   –û—à–∏–±–æ–∫: {stats['total_errors']} ({stats['error_breakdown']})")
        return stats


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ—Ç—Ä–∏–∫
metrics = Metrics()

