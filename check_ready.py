"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∫ –∑–∞–ø—É—Å–∫—É
"""

import os
import sys
from pathlib import Path

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å .env —Ñ–∞–π–ª–∞"""
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞...")
    if not os.path.exists('.env'):
        print("   ‚úó –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   ‚Üí –°–æ–∑–¥–∞–π—Ç–µ: cp .env.example .env")
        return False
    
    from dotenv import load_dotenv
    load_dotenv()
    
    issues = []
    if not os.getenv('BOT_TOKEN'):
        issues.append("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    if not os.getenv('ADMIN_USER_ID'):
        issues.append("ADMIN_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    if not os.getenv('DB_PASSWORD'):
        issues.append("DB_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if issues:
        print(f"   ‚úó –ü—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(f"     - {issue}")
        return False
    
    print("   ‚úì .env —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    return True


def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        from database.connection import get_db_connection
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name IN ('users', 'jobs')
        """)
        tables = cursor.fetchall()
        
        if len(tables) != 2:
            print("   ‚úó –¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            print("   ‚Üí –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python database/db_init.py")
            cursor.close()
            conn.close()
            return False
        
        cursor.close()
        conn.close()
        print("   ‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return True
    except Exception as e:
        print(f"   ‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("   ‚Üí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("     - PostgreSQL –∑–∞–ø—É—â–µ–Ω (brew services list)")
        print("     - –ü–∞—Ä–æ–ª—å –≤ .env –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        print("     - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ (python database/db_init.py)")
        return False


def check_directories():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    dirs = ['fonts', 'generated', 'logs']
    all_ok = True
    
    for dir_name in dirs:
        if not os.path.exists(dir_name):
            os.makedirs(dir_name, exist_ok=True)
            print(f"   ‚úì –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
        else:
            print(f"   ‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dir_name}")
    
    return True


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    required = ['aiogram', 'reportlab', 'PIL', 'psycopg2', 'dotenv']
    missing = []
    
    for module in required:
        try:
            if module == 'PIL':
                __import__('PIL')
            elif module == 'dotenv':
                __import__('dotenv')
            else:
                __import__(module)
        except ImportError:
            missing.append(module)
    
    if missing:
        print(f"   ‚úó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing)}")
        print("   ‚Üí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements.txt")
        return False
    
    print("   ‚úì –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∫ –∑–∞–ø—É—Å–∫—É...\n")
    
    checks = [
        check_env_file(),
        check_dependencies(),
        check_database(),
        check_directories(),
    ]
    
    print()
    if all(checks):
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print("   –ó–∞–ø—É—Å–∫: python bot.py")
        return 0
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        return 1


if __name__ == "__main__":
    sys.exit(main())

