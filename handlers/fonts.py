"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤
"""

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from utils.db_utils import update_user_font, save_font_file
import os

router = Router()




async def handle_font_file(message: Message, file_ext: str):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞"""
    user_id = message.from_user.id
    
    try:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        from utils.db_utils import get_or_create_user
        get_or_create_user(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file = message.document
        
        if not file.file_name:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞.")
            return
        
        file_name = file.file_name
        
        await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —à—Ä–∏—Ñ—Ç...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        bot = message.bot
        file_info = await bot.get_file(file.file_id)
        file_data = await bot.download_file(file_info.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        font_path = save_font_file(file_data, file_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É –≤ –ë–î
        if update_user_font(user_id, font_path):
            from handlers.menu import get_main_menu_keyboard
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            success_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÑ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç", callback_data="menu_set_format")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]
            ])
            
            await message.answer(
                f"‚úÖ –®—Ä–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                f"üìù –§–∞–π–ª: {file_name}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã.",
                reply_markup=success_keyboard
            )
        else:
            from handlers.menu import get_back_keyboard
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à—Ä–∏—Ñ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=get_back_keyboard("menu_main")
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à—Ä–∏—Ñ—Ç–∞: {str(e)}")


@router.message(F.document & (F.document.file_name.endswith('.ttf') | F.document.file_name.endswith('.TTF')))
async def handle_ttf_font(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ TTF-—à—Ä–∏—Ñ—Ç–∞"""
    await handle_font_file(message, '.ttf')


@router.message(F.document & (F.document.file_name.endswith('.otf') | F.document.file_name.endswith('.OTF')))
async def handle_otf_font(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ OTF-—à—Ä–∏—Ñ—Ç–∞"""
    await handle_font_file(message, '.otf')


@router.message(F.document)
async def handle_wrong_file_type(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
    file = message.document
    file_name = file.file_name if file and file.file_name else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    await message.answer(
        f"‚ùå –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_name}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .ttf –∏–ª–∏ .otf\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /upload_font –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞."
    )

