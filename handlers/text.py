"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""

from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from utils.db_utils import get_user_info, update_job_pdf_path, update_job_status_failed
from database.connection import get_db_connection, return_db_connection
from pdf_generator import generate_pdf_for_job
from utils.executors import pdf_executor
from utils.rate_limit import check_rate_limit
from utils.metrics import metrics
import time
import os
import asyncio
import logging

logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text & ~F.text.startswith('/'))
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ jobs –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF"""
    user_id = message.from_user.id
    text_content = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    allowed, error_msg = check_rate_limit(user_id)
    if not allowed:
        await message.answer(error_msg)
        logger.warning(f"Rate limit exceeded for user {user_id}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if not text_content:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    if len(text_content) < 3:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞).")
        return
    
    if len(text_content) > 100000:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 100000 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = get_user_info(user_id)
    if not user:
        from utils.db_utils import get_or_create_user
        user = get_or_create_user(user_id)
    
    from handlers.menu import get_back_keyboard
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–∞
    if not user['font_path']:
        from handlers.menu import get_main_menu_keyboard
        await message.answer(
            "‚ùå –®—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    if not os.path.exists(user['font_path']):
        from handlers.menu import get_main_menu_keyboard
        await message.answer(
            "‚ùå –§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ —à—Ä–∏—Ñ—Ç –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if not user['page_format']:
        from handlers.menu import get_main_menu_keyboard
        await message.answer(
            "‚ùå –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –≤—ã–±—Ä–∞–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    if user['page_format'] not in ['A4', 'A5']:
        from handlers.menu import get_main_menu_keyboard
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
    conn = get_db_connection()
    cursor = conn.cursor()
    job_id = None
    
    try:
        cursor.execute(
            """
            INSERT INTO jobs (user_id, text_content, status)
            VALUES (%s, %s, %s)
            RETURNING id
            """,
            (user_id, text_content, 'pending')
        )
        
        job_id = cursor.fetchone()[0]
        conn.commit()
        
        await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF...")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ç–∫–∏
        grid_enabled = user.get('grid_enabled', False)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        start_time = time.time()
        loop = asyncio.get_event_loop()
        pdf_path = await loop.run_in_executor(
            pdf_executor,
            generate_pdf_for_job,
            job_id, 
            text_content, 
            user['font_path'], 
            user['page_format'],
            grid_enabled
        )
        execution_time_ms = int((time.time() - start_time) * 1000)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics.record_pdf_time(execution_time_ms)
        metrics.record_request(user_id)
        logger.info(f"PDF generated for user {user_id}, job {job_id}, time: {execution_time_ms}ms")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ PDF –≤ –ë–î
        update_job_pdf_path(job_id, pdf_path, execution_time_ms)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if os.path.exists(pdf_path):
            from handlers.menu import get_main_menu_keyboard
            
            pdf_file = FSInputFile(pdf_path)
            await message.answer_document(
                document=pdf_file,
                caption=f"‚úÖ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n‚è± –í—Ä–µ–º—è: {execution_time_ms}–º—Å"
            )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω
            await message.answer(
                "üìù –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω PDF?\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç.",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            from handlers.menu import get_main_menu_keyboard
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_main_menu_keyboard()
            )
            update_job_status_failed(job_id)
        
    except Exception as e:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –º–µ—Ç—Ä–∏–∫–∏
        error_type = type(e).__name__
        metrics.record_error(error_type)
        logger.error(f"Error generating PDF for user {user_id}, job {job_id}: {str(e)}", exc_info=True)
        
        if job_id:
            update_job_status_failed(job_id)
        from handlers.menu import get_main_menu_keyboard
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
    finally:
        if cursor:
            cursor.close()
        if conn:
            return_db_connection(conn)

