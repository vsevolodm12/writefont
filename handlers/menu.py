"""
–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from utils.db_utils import get_or_create_user, get_user_info
from config import PAGE_FORMATS

router = Router()


def get_main_menu_keyboard(grid_enabled: bool = False):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    grid_button_text = "‚úÖ –§–æ–Ω: –∫–ª–µ—Ç–∫–∞" if grid_enabled else "üìê –§–æ–Ω: –∫–ª–µ—Ç–∫–∞"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç", callback_data="menu_upload_font"),
            InlineKeyboardButton(text="üìÑ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç", callback_data="menu_set_format")
        ],
        [
            InlineKeyboardButton(text=grid_button_text, callback_data="toggle_grid")
        ],
        [
            InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å PDF", callback_data="menu_create_pdf")
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="menu_info")
        ]
    ])
    return keyboard


def get_back_keyboard(callback_data: str = "menu_main"):
    """–ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)]
    ])
    return keyboard


def get_format_keyboard():
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÑ A4", callback_data="format_A4"),
            InlineKeyboardButton(text="üìÑ A5", callback_data="format_A5")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]
    ])
    return keyboard


def get_create_pdf_keyboard():
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]
    ])
    return keyboard


import logging

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
import time
_processed_messages = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö message_id

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±–µ–∏—Ö –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(Command("start", "menu"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    global _processed_messages
    
    user_id = message.from_user.id
    message_id = message.message_id
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    unique_key = (user_id, message_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if unique_key in _processed_messages:
        logger.warning(f"Duplicate /start ignored: user={user_id}, msg_id={message_id}")
        return
    
    # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ
    _processed_messages.add(unique_key)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
    if len(_processed_messages) > 1000:
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –∑–∞–ø–∏—Å–µ–π
        _processed_messages.clear()
        _processed_messages.add(unique_key)
    
    try:
        logger.info(f"Processing /start for user {user_id}, message_id={message_id}")
        
        user = get_or_create_user(user_id)
        user_info = get_user_info(user_id)
        
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤!\n\n"
            "üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        )
        
        if user['font_path']:
            font_name = user['font_path'].split('/')[-1]
            welcome_text += f"‚úì –®—Ä–∏—Ñ—Ç: {font_name}\n"
        else:
            welcome_text += "‚ö† –®—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω\n"
        
        format_name = PAGE_FORMATS.get(user['page_format'], user['page_format'] or 'A4')
        welcome_text += f"‚úì –§–æ—Ä–º–∞—Ç: {format_name}\n"
        
        grid_enabled = user_info.get('grid_enabled', False) if user_info else False
        grid_status = "‚úì –í–∫–ª—é—á–µ–Ω" if grid_enabled else "‚úó –í—ã–∫–ª—é—á–µ–Ω"
        welcome_text += f"‚úì –§–æ–Ω –∫–ª–µ—Ç–∫–∞: {grid_status}\n\n"
        
        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        await message.answer(welcome_text, reply_markup=get_main_menu_keyboard(grid_enabled))
        logger.info(f"‚úì Successfully sent /start response to user {user_id}")
        
    except Exception as e:
        logger.error(f"‚úó Error in /start handler for user {user_id}: {e}", exc_info=True)
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        _processed_messages.discard(unique_key)
        raise


@router.callback_query(F.data == "menu_main")
async def menu_main(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    user = get_or_create_user(user_id)
    user_info = get_user_info(user_id)
    
    welcome_text = (
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
    )
    
    if user['font_path']:
        font_name = user['font_path'].split('/')[-1]
        welcome_text += f"‚úì –®—Ä–∏—Ñ—Ç: {font_name}\n"
    else:
        welcome_text += "‚ö† –®—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω\n"
    
    format_name = PAGE_FORMATS.get(user['page_format'], user['page_format'] or 'A4')
    welcome_text += f"‚úì –§–æ—Ä–º–∞—Ç: {format_name}\n"
    
    grid_enabled = user_info.get('grid_enabled', False) if user_info else False
    grid_status = "‚úì –í–∫–ª—é—á–µ–Ω" if grid_enabled else "‚úó –í—ã–∫–ª—é—á–µ–Ω"
    welcome_text += f"‚úì –§–æ–Ω –∫–ª–µ—Ç–∫–∞: {grid_status}\n\n"
    
    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await callback.message.edit_text(welcome_text, reply_markup=get_main_menu_keyboard(grid_enabled))


@router.callback_query(F.data == "menu_upload_font")
async def menu_upload_font(callback: CallbackQuery):
    """–ú–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞"""
    user = get_user_info(callback.from_user.id)
    
    text = "üìé –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞\n\n"
    
    if user and user['font_path']:
        font_name = user['font_path'].split('/')[-1]
        text += f"–¢–µ–∫—É—â–∏–π —à—Ä–∏—Ñ—Ç: {font_name}\n\n"
    else:
        text += "‚ö† –®—Ä–∏—Ñ—Ç –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω\n\n"
    
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .ttf –∏–ª–∏ .otf –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await callback.message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:",
        reply_markup=keyboard
    )


@router.callback_query(F.data == "menu_set_format")
async def menu_set_format(callback: CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    user = get_user_info(callback.from_user.id)
    
    text = "üìÑ –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n\n"
    
    if user:
        current_format = PAGE_FORMATS.get(user['page_format'], user['page_format'] or 'A4')
        text += f"–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç: {current_format}\n\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:"
    
    await callback.message.edit_text(text, reply_markup=get_format_keyboard())
    await callback.answer()


@router.callback_query(F.data == "menu_create_pdf")
async def menu_create_pdf(callback: CallbackQuery):
    """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è PDF"""
    user_id = callback.from_user.id
    user = get_user_info(user_id)
    
    text = "üìù –°–æ–∑–¥–∞–Ω–∏–µ PDF\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    issues = []
    ready_to_create = True
    
    if not user or not user['font_path']:
        issues.append("‚ùå –®—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        ready_to_create = False
    else:
        font_name = user['font_path'].split('/')[-1]
        text += f"‚úì –®—Ä–∏—Ñ—Ç: {font_name}\n"
    
    if not user or not user['page_format']:
        issues.append("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        ready_to_create = False
    else:
        format_name = PAGE_FORMATS.get(user['page_format'], user['page_format'])
        text += f"‚úì –§–æ—Ä–º–∞—Ç: {format_name}\n"
    
    if issues:
        text += "\n" + "\n".join(issues)
        text += "\n\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    else:
        text += "\n‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()
    
    if ready_to_create:
        await callback.message.answer(
            "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:",
            reply_markup=keyboard
        )


@router.callback_query(F.data == "menu_info")
async def menu_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    text = (
        "‚ÑπÔ∏è –û –±–æ—Ç–µ\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–∫–æ–Ω—Å–ø–µ–∫—Ç—ã —Å –≤–∞—à–∏–º —Ä—É–∫–æ–ø–∏—Å–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º.\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "üìù –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ TTF/OTF —à—Ä–∏—Ñ—Ç\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã (A4 –∏–ª–∏ –¢–µ—Ç—Ä–∞–¥—å)\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –±–æ—Ç—É\n\n"
        "–ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç PDF —Å –≤–∞—à–∏–º —à—Ä–∏—Ñ—Ç–æ–º!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

